name: CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: Format check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run 'go fmt ./...'"
            gofmt -s -d .
            exit 1
          fi

      - name: Vet check
        run: go vet ./...

      - name: No external modules guard
        run: |
          if [ "$(go list -m all | wc -l | tr -d ' ')" -ne 1 ]; then
            echo "External modules detected. Only stdlib allowed."
            go list -m all
            exit 1
          fi

      - name: Run tests with race detection
        run: go test ./... -race -count=1

      - name: Run benchmarks
        run: go test ./... -bench=. -run=^$ -benchtime=1s

  coverage:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: false

      - name: Generate coverage report
        run: go test ./... -coverprofile=coverage.out

      - name: Coverage check
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 40" | bc -l) )); then
            echo "Coverage below 40% (minimum for work-in-progress)"
            exit 1
          fi

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: false

      - name: Check behaviour-focused tests
        run: |
          # Check for anti-patterns in test files
          if grep -r "unsafe\." --include="*_test.go" .; then
            echo "Found unsafe usage in tests - violates behaviour-focused testing"
            exit 1
          fi
          
          if grep -r "reflect\.ValueOf.*CanSet\|reflect\.ValueOf.*Set" --include="*_test.go" .; then
            echo "Found reflection to access unexported fields in tests"
            exit 1
          fi

      - name: UK English spelling check
        run: |
          # Check for US spellings in code comments and docs (excluding JSON tags and stdlib)
          # Based on GoWise project standards for UK English
          US_SPELLINGS="\bbehavior\b|\binitialize\b|\borganize\b|\bprioritize\b|\boptimize\b|\bmodularize\b|\bstandardize\b|\bnormalize\b|\bspecialize\b|\bmaterialize\b|\bparameterize\b|\bsynchronize\b|\bminimize\b|\bmaximize\b|\bcharacterize\b|\bcentralize\b|\bfinalize\b|\banalyze\b|\bcatalog\b|\bflavor\b|\bcolor\b|\bhonor\b|\blabor\b|\bfavor\b|\barmor\b|\btumor\b|\bhumor\b|\bvigor\b|\btraveled\b|\bcanceled\b|\bmodeling\b|\bleveling\b"
          
          echo "Checking for US English spellings..."
          FOUND_US_SPELLINGS=0
          
          # Search for US spellings and show specific matches
          if grep -r -n -E "$US_SPELLINGS" --include="*.go" --include="*.md" . | grep -v ".git" | grep -v 'json:' | grep -v 'xml:'; then
            echo ""
            echo "❌ Found US English spellings above. Use UK English equivalents:"
            echo "   behavior → behaviour     initialize → initialise"
            echo "   organize → organise      prioritize → prioritise" 
            echo "   optimize → optimise      analyze → analyse"
            echo "   catalog → catalogue      flavor → flavour"
            echo "   color → colour           honor → honour"
            echo "   license → licence        traveled → travelled"
            echo "   canceled → cancelled     modeling → modelling"
            FOUND_US_SPELLINGS=1
          fi
          
          # Check for "license" but exclude JSON/XML struct tags and stdlib usage
          if grep -r -n "\blicense\b" --include="*.go" --include="*.md" . | grep -v ".git" | grep -v 'json:"' | grep -v 'xml:"' | grep -v 'License:' | grep -v 'LICENSE' | grep -v '// license' | head -5; then
            echo ""
            echo "❌ Found 'license' - use 'licence' in UK English (excluding JSON/XML tags and license headers)"
            FOUND_US_SPELLINGS=1
          fi
          
          if [ $FOUND_US_SPELLINGS -eq 1 ]; then
            echo ""
            echo "Fix all US spellings above to comply with GoWise UK English standards."
            exit 1
          fi
          
          echo "✅ All spelling checks passed - UK English correctly used throughout"

      - name: Check documentation examples
        run: |
          # Ensure all exported functions have examples (skip for work-in-progress)
          echo "Documentation examples check: SKIPPED (work-in-progress framework)"
          echo "TODO: Add Example functions for all exported functions before v1.0"