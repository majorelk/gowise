name: CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24', '1.25']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: Format check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run 'go fmt ./...'"
            gofmt -s -d .
            exit 1
          fi

      - name: Vet check
        run: go vet ./...

      - name: No external modules guard
        run: |
          if [ "$(go list -m all | wc -l | tr -d ' ')" -ne 1 ]; then
            echo "External modules detected. Only stdlib allowed."
            go list -m all
            exit 1
          fi

      - name: Run tests with race detection
        run: go test ./... -race -count=1

      - name: Run benchmarks
        run: go test ./... -bench=. -run=^$ -benchtime=1s

  coverage:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'
          cache: false

      - name: Generate coverage report
        run: go test ./... -coverprofile=coverage.out

      - name: Coverage check
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 40" | bc -l) )); then
            echo "Coverage below 40% (minimum for work-in-progress)"
            exit 1
          fi

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'
          cache: false

      - name: Check behaviour-focused tests
        run: |
          # Check for anti-patterns in test files
          if grep -r "unsafe\." --include="*_test.go" .; then
            echo "Found unsafe usage in tests - violates behaviour-focused testing"
            exit 1
          fi
          
          if grep -r "reflect\.ValueOf.*CanSet\|reflect\.ValueOf.*Set" --include="*_test.go" .; then
            echo "Found reflection to access unexported fields in tests"
            exit 1
          fi

      - name: UK English spelling check
        run: ./scripts/check-uk-spelling.sh

      - name: Check documentation examples
        run: |
          # Ensure all exported functions have examples (skip for work-in-progress)
          echo "Documentation examples check: SKIPPED (work-in-progress framework)"
          echo "TODO: Add Example functions for all exported functions before v1.0"